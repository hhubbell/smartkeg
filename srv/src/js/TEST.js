/* ------------------------------------------------------------------------ * * Filename:    ajax.js * Author:      Harrison Hubbell * Date:        10/07/2014 * Description: Manage asyncronous calls to a server. * Requires:    socket.js * ------------------------------------------------------------------------ */function Ajax(host) {    this.xmlhttp = new XMLHttpRequest();    this.host = host;}Ajax.prototype.send = function (method, payload) {    var self = this;    return new Promise(function (resolve, reject) {        self.xmlhttp.open(method, self.host, true);        self.xmlhttp.onload = function () {            if (self.xmlhttp.status === 200) {                resolve(self.xmlhttp.response);            } else {                reject(new Error(self.xmlhttp.statusText));            }        };        self.xmlhttp.onerror = function () {            reject(new Error('Network Error'));        }        self.xmlhttp.send(payload);    });}/* ------------------------------------------------------------------------ * * Filename:    client.js * Author:      Harrison Hubbell * Date:        11/11/2014 * Description: Client side processing for the smartkeg system. Maintains *              a EventSource and Ajax connection with the server, and  *              renders graphs based on data it may receive. * Requires:    ajax.js *              keg.js *              graph.js * ------------------------------------------------------------------------ */function SmartkegClient(socket) {    this.source = new EventSource(socket.toString());    this.ajax = new Ajax(socket.get_url());    this.socket = socket;    this.last_update_id = 0;    this.render_index = 0;    this.beer_display = null;    this.consumption_display = null;    this.remaining_display = null;    this.brewers = null;    this.brewer_offering = null;    this.kegs = [];      this.menu = {};}SmartkegClient.prototype.set_beer_display = function (selector) {    this.beer_display = document.querySelector(selector);}SmartkegClient.prototype.set_consumption_display = function (selector) {    this.consumption_display = new ScatterPlot(selector);}SmartkegClient.prototype.set_remaining_display = function (selector) {    this.remaining_display = new BarGraph(selector);}SmartkegClient.prototype.set_temperature_display = function (selector) {    this.temperature_display = document.querySelector(selector);}SmartkegClient.prototype.render = function () {    this.render_beer();    this.render_consumption();    this.render_remaining();    this.temperature_display.innerHTML = this.temperature + ' Â°F';}SmartkegClient.prototype.render_beer = function () {    var keg = this.kegs[this.render_index];    for (var i = 0; i < this.beer_display.children.length; i++) {        var node = this.beer_display.children[i]        var content = node.getElementsByClassName('serving-content')[0];        content.innerHTML = keg.beer[node.id] || '';    }}SmartkegClient.prototype.render_consumption = function () {    var keg = this.kegs[this.render_index];        this.consumption_display.clear();    bottom = this.consumption_display.render_seasonal_trendline(keg.volume, 0, 0, (1 - keg.remaining.value), keg.falling, 'values');    this.consumption_display.render_seasonal_trendline(keg.volume, bottom, (1 - keg.remaining.value), keg.remaining.value, keg.consumption.days, 'prediction');}SmartkegClient.prototype.render_remaining = function () {    var keg = this.kegs[this.render_index];        this.remaining_display.popall();    this.remaining_display.clear();       this.remaining_display.push(keg.remaining.value);    this.remaining_display.render();}SmartkegClient.prototype.render_brewers = function (selector) {    var NAME = 'brewer';    var self = this;    var element = document.querySelector(selector);    element.polyempty();         for (var i = 0; i < this.brewers.length; i++) {        var current = this.brewers[i];        var radio = document.createElement('input');        var label = document.createElement('label');        radio.type = 'radio';        radio.name = NAME;        radio.value = current.id;        radio.id = NAME + '-' + current.name;        label.htmlFor = NAME + '-' + current.name;        label.innerHTML = current.name;        radio.addEventListener('click', function () {            self.ajax.send('POST', 'action=get&data=offering&brewer=' + this.value).then(function (response) {                self.brewer_offering = JSON.parse(response);                self.render_brewer_offering('#tap-form-beer');            });            this.parentElement.hidden = true;        });        element.appendChild(radio);        element.appendChild(label);    }    element.hidden = false;}SmartkegClient.prototype.render_brewer_offering = function (selector) {    var NAME = 'beer';    var self = this;    var element = document.querySelector(selector);    element.polyempty();    this.brewer_offering.forEach(function (current) {        var radio = document.createElement('input');        var label = document.createElement('label');        radio.type = 'radio';        radio.name = NAME;        radio.value = current.id;        radio.id = NAME + '-' + current.id;        label.htmlFor = NAME + '-' + current.id;        label.innerHTML = current.name;        radio.addEventListener('click', function () {            self.render_confirm('#tap-form-confirm', current);            this.parentElement.hidden = true;                    });        element.appendChild(radio);        element.appendChild(label);    });    element.hidden = false;}SmartkegClient.prototype.render_confirm = function (selector, beer) {    var self = this;    var element = document.querySelector(selector);    var beer_id = document.querySelector('input[name=id]') || document.createElement('input');    beer_id.type = 'hidden';    beer_id.name = 'id';    beer_id.value = beer.id;    element.appendChild(beer_id);     document.getElementById('confirm-name').value = beer.name;    document.getElementById('confirm-abv').value = beer.abv;    document.getElementById('confirm-ibu').value = beer.ibu;    element.hidden = false;}SmartkegClient.prototype.render_tap_menu = function (selector) {    var NAME = 'keg';    var self = this;    var element = document.querySelector(selector);    element.polyempty();    for (var i = 0; i < this.kegs.length; i++) {        var current = this.kegs[i];        var radio = document.createElement('input');        var label = document.createElement('label');         radio.type = 'radio';        radio.name = NAME;        radio.value = current.id;        radio.id = NAME + '-' + current.id;        label.htmlFor = NAME + '-' + current.id;        label.innerHTML = "Tap " + (i + 1) + ": " + current.beer.name + ' (' + (current.remaining.value * 100).toFixed(2) + '% remaining)';                radio.addEventListener('click', function () {            self.replace = this.value;            self.ajax.send('POST', 'action=get&data=brewers').then(function (response) {                self.brewers = JSON.parse(response);                self.render_brewers('#tap-form-brewer');            });                        this.parentElement.hidden = true;        });                element.appendChild(radio);        element.appendChild(label);    }}/* ------------------------------------------------------------------------ * * Filename:    graph.js * Author:      Harrison Hubbell * Date:        10/14/2014 * Description: Manage formatting SVG graphs. * ------------------------------------------------------------------------ */function ScatterPlot(selector) {    this.SVG_NS = 'http:    this.set_canvas(selector);    this.height = this.element.clientHeight;    this.width = this.element.clientWidth;    this.selector = selector;    this.sets = [];}ScatterPlot.prototype.push = function(set) {    this.sets.push(set);}ScatterPlot.prototype.pop = function() {    this.sets.pop();}ScatterPlot.prototype.popall = function() {    this.sets.length = 0;}ScatterPlot.prototype.clear = function() {    this.element.polyempty();    this.set_defs();}ScatterPlot.prototype.set_canvas = function(selector) {    this.element = document.querySelector(selector);    this.set_defs();}ScatterPlot.prototype.set_defs = function() {    this.defs = this.element.getElementsByTagNameNS(this.SVG_NS, 'defs')[0];    if (!this.defs) {        this.defs = document.createElementNS(this.SVG_NS, 'defs');        this.element.appendChild(this.defs);    }}ScatterPlot.prototype.set_radius = function(radius) {    this.radius = radius;}ScatterPlot.prototype.set_style = function(style) {    this.style = style;}ScatterPlot.prototype.render_points = function(bottom) {    var self = this;    this.sets.forEach(function(set) {        var radius = self.radius;        var style = self.style;        var length = set[set.length - 1].x;         for (var i = 0; i < set.length; i++) {            var y_prog = set[i].y;            var j = i - 1;                        while (set[j]) {                y_prog += set[j].y;                j -= 1;            }            var y_val = y_prog / bottom * self.height;            var x_val = ((set[i].x / length) * self.width);            var point = document.createElementNS(self.SVG_NS, style);            point.classList.add('chart-day-mean');            if (style === 'rect') {                point.setAttributeNS(null, 'x', x_val - radius/2);                point.setAttributeNS(null, 'y', y_val - radius/2);                point.setAttributeNS(null, 'width', radius);                point.setAttributeNS(null, 'height', radius);            } else if (style === 'circle') {                point.setAttributeNS(null, 'cx', x_val);                point.setAttributeNS(null, 'cy', y_val);                point.setAttributeNS(null, 'r', radius);            }            self.element.appendChild(point);        }    });}ScatterPlot.prototype.render_seasonal_trendline = function(bottom, vertical_fix, start_percent, width_percent, set, type) {    this.height = this.element.clientHeight;    this.width = this.element.clientWidth;        var line = document.createElementNS(this.SVG_NS, 'polyline');    if (type == 'values') {        var line_string = '0,0 ';    } else {        var line_string = '';    }    var start = start_percent * this.width;    var length = set[set.length - 1].x || 1;    for (var i = 0; i < set.length; i++) {         var y_prog = set[i].y;        var j = i - 1;                    while (set[j]) {            y_prog += set[j].y;            j -= 1;        }        var y_val = vertical_fix + (y_prog / bottom * this.height);        var x_val = start + (set[i].x / length) * (width_percent * this.width);        line_string += x_val + ',' + y_val + ' ';    }    if (type == 'values') {        line.classList.add('chart-trendline');    } else if (type == 'prediction') {        line.classList.add('chart-prediction');    }        line.setAttributeNS(null, 'points', line_string);            this.element.appendChild(line);    return y_val}ScatterPlot.prototype.render = function(max, points, trend) {    this.height = this.element.clientHeight;    this.width = this.element.clientWidth;    if (trend) this.render_seasonal_trendline(max);    if (points) this.render_points(max);}function BarGraph(selector) {    this.SVG_NS = 'http:    this.REM_MED = .45;    this.REM_LOW = .20;    this.set_canvas(selector);    this.height = this.element.clientHeight;    this.width = this.element.clientWidth;    this.categories = []}BarGraph.prototype.push = function(category) {    this.categories.push(category);}BarGraph.prototype.pop = function() {    this.categories.pop();}BarGraph.prototype.popall = function() {    this.categories.length = 0;}BarGraph.prototype.clear = function() {    this.element.polyempty();    this.set_defs();}BarGraph.prototype.set_canvas = function(selector) {    this.element = document.querySelector(selector);    this.set_defs()}BarGraph.prototype.set_defs = function() {    this.defs = this.element.getElementsByTagNameNS(this.SVG_NS, 'defs')[0];    if (!this.defs) {        this.defs = document.createElementNS(this.SVG_NS, 'defs');        this.element.appendChild(this.defs);    }}BarGraph.prototype.render = function() {    this.height = this.element.clientHeight;    this.width = this.element.clientWidth;    var bar_width = (100 / this.categories.length || 1) + "%";    var bar_x = this.width / this.categories.length;    var TEXT_WIDTH = 124;    for (var i = 0; i < this.categories.length; i++) {        var rect = document.createElementNS(this.SVG_NS, 'rect');        var text = document.createElementNS(this.SVG_NS, 'text');        var bar_top = (1 - this.categories[i]) * this.height                if (this.categories[i] < this.REM_LOW) {            rect.classList.add('low');        } else if (this.categories[i] < this.REM_MED) {            rect.classList.add('medium');        } else {            rect.classList.add('ok');        }                rect.setAttributeNS(null, 'x', bar_x * i);        rect.setAttributeNS(null, 'y', bar_top);        rect.setAttributeNS(null, 'width', bar_width);        rect.setAttributeNS(null, 'height', this.height - bar_top);                text.classList.add('remaining-text');        text.setAttributeNS(null, 'x', this.width / 2 - TEXT_WIDTH / 2);        text.setAttributeNS(null, 'y', this.height / 2);        text.textContent = (this.categories[i] * 100).toFixed(2) + '%';        this.element.appendChild(rect);        this.element.appendChild(text);    }}/* ------------------------------------------------------------------------ * * Filename:    polyfill.js * Author:      Harrison Hubbell * Date:        11/24/2014 * Description: Polyfills for needed  functionality * ------------------------------------------------------------------------ */Element.prototype.polyclosest = function(selector) {    var node = this;    while (node) {        if (node.matches(selector)) {            return node;        } else {            node = node.parentElement;        }    }    return null;}Element.prototype.polyempty = function() {    while (this.lastChild) {        this.removeChild(this.lastChild);    }}/* ------------------------------------------------------------------------ * * Filename:    socket.js * Author:      Harrison Hubbell * Date:        10/07/2014 * Description: Manage socket information * ------------------------------------------------------------------------ *//** * Defines a Socket Object. * @param host: The URL of the host device * @param port [optional]: The port on the host device */function Socket(host, port) {    this.host = host;    this.port = port;}Socket.prototype.get_url = function() {    return '}Socket.prototype.toString = function() {    return '}/* ------------------------------------------------------------------------ * * Filename:    main.js * Author:      Harrison Hubbell * Date:        10/07/2014 * Description: The main method * ------------------------------------------------------------------------ */(function () {    var PROTOCOL = new RegExp('^(http(s)?:\/\/)');    var TRAILING = new RegExp('\/$');    var HOST = document.URL.replace(PROTOCOL, '').replace(TRAILING, '');    var PORT = 8000;        var client = new SmartkegClient(new Socket(HOST, PORT));    client.set_temperature_display('#current-temperature');    client.set_beer_display('#serving');    client.set_consumption_display('#consumption-graph');    client.set_remaining_display('#remaining-graph');                client.menu = document.getElementById('beer-menu');    client.options = client.menu.querySelector('ul');    client.close_forms = client.menu.getElementsByClassName('close-form');        client.item_tap = document.getElementById('beer-option-tap');    client.item_rate = document.getElementById('beer-option-rate');    client.form_tap = document.getElementById('tap-form');    client.form_rate = document.getElementById('rate-form');        Array.prototype.slice.call(client.close_forms, 0).forEach(function(i) {         i.addEventListener('click', function() {            form = this.polyclosest('form');            form.hidden = true;                        fieldsets = Array.prototype.slice.call(form.getElementsByTagName('fieldset'), 0);            fieldsets.slice(1).forEach(function(f) {                f.hidden = true;            });            fieldsets[0].hidden = false;            client.options.hidden = false;        })    });        client.item_tap.addEventListener('click', function() {        client.options.hidden = true;        client.form_tap.hidden = false;    });    client.form_tap.onsubmit = function() {        var self = this;        var query_string = encodeURI(            'action=set&data=tap' +            '&replace=' + client.replace +            '&beer=' + this.id.value +            '&volume=' + this.confirm_volume.value +            '&passphrase=' + this.passphrase        );        console.log(query_string);                client.ajax.send('POST', query_string).then(function(response) {            self.reset();            self.hidden = true;            fieldsets = Array.prototype.slice.call(self.getElementsByTagName('fieldset'), 0);            fieldsets.slice(1).forEach(function(f) {                f.hidden = true;            });            fieldsets[0].hidden = false;            client.options.hidden = false;        });        return false;    }        client.item_rate.addEventListener('click', function() {        client.options.hidden = true;        client.form_rate.hidden = false;    });    client.form_rate.oninput = function() {        this.ratingoutput.value = this.ratingslider.value    }        client.form_rate.onsubmit = function() {        var self = this;        var query_string = encodeURI(            "action=set" +             "&data=rate" +            "&beer=" + client.kegs[client.render_index].beer.id +            "&rating=" + this.ratingslider.value +            "&comments=" + this.ratingdescription.value        );        console.log(query_string);        client.ajax.send('POST', query_string).then(function(response) {            self.reset();            self.hidden = true;                        client.options.hidden = false;        });        return false;    }                client.source.onmessage = function(e) {        var id = parseInt(e.lastEventId);        var src = e.origin;         if (id > client.last_update_id) {            var payload = JSON.parse(e.data);                        console.log(payload);            client.last_update_id = id;            client.temperature = (payload.temperature) ? payload.temperature.toFixed(2) : '--';            client.kegs = payload.kegs            client.render();                             client.render_tap_menu('#tap-form-taps');        }    }                window.onresize = function() {        client.render_consumption();        client.render_remaining();    }})();